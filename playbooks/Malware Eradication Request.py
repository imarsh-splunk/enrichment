"""
This playbook should be run as a sub-playbook at the end of automation to report its findings. It is an example of how Phantom can be used to generate tickets.
"""

import phantom.rules as phantom
import json
from datetime import datetime, timedelta
def on_start(container):
    phantom.debug('on_start() called')

    return

def Comment_Misconfigured_List(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Comment_Misconfigured_List() called')

    phantom.comment(container=container, comment="Custom list not configured, or badly configured")

    return

def create_ServiceNow_ticket(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('create_ServiceNow_ticket() called')

    name_value = container.get('name', None)

    # collect data for 'create_ServiceNow_ticket' call

    parameters = []
    
    # build parameters list for 'create_ServiceNow_ticket' call
    parameters.append({
        'table': "incident",
        'fields': "",
        'vault_id': "",
        'description': "Phantom Handled The EC2 Issue",
        'short_description': name_value,
    })

    phantom.act(action="create ticket", parameters=parameters, assets=['servicenow'], callback=ServiceNow_Status_Message, name="create_ServiceNow_ticket")

    return

def send_email_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('send_email_1() called')

    name_value = container.get('name', None)

    # collect data for 'send_email_1' call

    parameters = []
    
    # build parameters list for 'send_email_1' call
    parameters.append({
        'cc': "",
        'to': "deking@splunk.com",
        'bcc': "",
        'body': "Phantom Handled the ticket",
        'from': "phantom@attackrange.local",
        'headers': "",
        'subject': name_value,
        'attachments': "",
    })

    phantom.act(action="send email", parameters=parameters, assets=['yahoo smtp'], callback=Email_Status_Message, name="send_email_1")

    return

def ServiceNow_Status_Message(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('ServiceNow_Status_Message() called')
    
    template = """ServiceNow Ticket Creation status : {0}"""

    # parameter list for template variable replacement
    parameters = [
        "create_ServiceNow_ticket:action_result.status",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="ServiceNow_Status_Message")

    add_comment_5(container=container)

    return

def add_comment_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('add_comment_5() called')

    formatted_data_1 = phantom.get_format_data(name='ServiceNow_Status_Message')

    phantom.comment(container=container, comment=formatted_data_1)

    return

def Email_Status_Message(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Email_Status_Message() called')
    
    template = """Email Ticket Creation status : {0}"""

    # parameter list for template variable replacement
    parameters = [
        "send_email_1:action_result.message",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="Email_Status_Message")

    add_comment_6(container=container)

    return

def add_comment_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('add_comment_6() called')

    formatted_data_1 = phantom.get_format_data(name='Email_Status_Message')

    phantom.comment(container=container, comment=formatted_data_1)

    return

def on_finish(container, summary):
    phantom.debug('on_finish() called')
    # This function is called after all actions are completed.
    # summary of all the action and/or all details of actions
    # can be collected here.

    # summary_json = phantom.get_summary()
    # if 'result' in summary_json:
        # for action_result in summary_json['result']:
            # if 'action_run_id' in action_result:
                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)
                # phantom.debug(action_results)

    return