{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "ESCU",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "",
            "description": "This playbook processes filehashes not in bogon_list and creates a task note for every indicator for review by the analyst",
            "hash": "a5844f1d7ba018a747ff11404a5bd4ae36368ae0",
            "joint": {
                "cells": [
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'check_fileHash' block\n    check_fileHash(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0d75d904-721f-445e-a6e1-b1d349bb4515",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 16,
                        "line_start": 8,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -320,
                            "y": -60
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 1
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "create task notes",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 713,
                        "line_start": 700,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 16,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1380,
                            "y": 260
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 2
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "73526c24-64aa-4846-b4cf-0a8a478c3c81",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0d75d904-721f-445e-a6e1-b1d349bb4515",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 3
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9c65e76f-b0e0-4627-8a21-5c2bbe8163ed",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 6
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "76b7fac7-397a-49c1-b131-45a2f657b097",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 492
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9cdc6ec0-3f2d-422b-9931-7b689e992fb0",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 494
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "2a6128f3-fcb5-4fcd-b928-40395f0848ce",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0413c9fc-fee8-433f-ab45-9458da4c6133",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "571ee01f-7cef-4f30-b126-0ab3b76dff25",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 555
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "813dded9-ed1d-42e2-b3fc-df6d5dd20748",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "c040f191-9789-4f2b-b4ed-6ed6265ea45e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "2e08bb76-1525-4612-ac24-f813b75d0e56",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 556
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "b3db4e75-2a75-42a5-a6ef-98b771e81a97",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "cc64ef72-b0d9-4d5b-babf-84b7d9a1582c",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0bf4bc4e-04e8-4b45-be55-deaaa3f1626e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 557
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "21c2ea70-c3d5-4fb0-bc7a-f7a11e544c51",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "652ffe24-4688-41be-8575-9774f968d7a0",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 583
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def check_fileHash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_fileHash() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.fileHash\", \"!=\", \"\"],\n            [\"artifact:*.cef.fileHashMd5\", \"!=\", \"\"],\n            [\"artifact:*.cef.fileHashSha1\", \"!=\", \"\"],\n            [\"artifact:*.cef.fileHashSha256\", \"!=\", \"\"],\n            [\"artifact:*.cef.fileHashSha512\", \"!=\", \"\"],\n            [\"artifact:*.cef.hash\", \"!=\", \"\"],\n        ],\n        logical_operator='or')\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        fileHash_filter(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    missing_data_comment(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "check fileHash",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 42,
                        "line_start": 16,
                        "name": "decision",
                        "notes": "Check for fileHash and if missing provide a comment that no hashes were found.\n\nGREEN: if fileHash exists\n\nPURPLE: if missing add a comment of missing artifact",
                        "number": 1,
                        "order": 2,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.fileHash",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.fileHashMd5",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.fileHashSha1",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.fileHashSha256",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.fileHashSha512",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.hash",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -180,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "check_fileHash",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 587
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f41243df-438e-453f-bd9a-26ee9053314b",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "652ffe24-4688-41be-8575-9774f968d7a0",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0413c9fc-fee8-433f-ab45-9458da4c6133",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 589
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "bcfc2c03-5ebe-41c0-9fea-839794a8e866",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "652ffe24-4688-41be-8575-9774f968d7a0",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "c040f191-9789-4f2b-b4ed-6ed6265ea45e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 590
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ec38edaa-16cc-4312-aa47-996e5abef632",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "652ffe24-4688-41be-8575-9774f968d7a0",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "cc64ef72-b0d9-4d5b-babf-84b7d9a1582c",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 591
                    },
                    {
                        "action": "file intelligence",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "hash": "merge_list:custom_function_result.data.*.item",
                            "ip": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHash"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "file intelligence",
                                "actions": [
                                    "ip reputation",
                                    "ip intelligence",
                                    "domain reputation",
                                    "domain intelligence",
                                    "file reputation",
                                    "file intelligence",
                                    "vulnerability reputation",
                                    "vulnerability intelligence",
                                    "url reputation",
                                    "url intelligence",
                                    "alert rule lookup",
                                    "alert data lookup",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Recorded Future",
                                "app_version": "1.2.0",
                                "appid": "6efe0e1b-76ac-4ffd-8fa0-ac58fd6efd77",
                                "asset_name": "recorded_future_500",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "hash": "merge_list:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 19,
                                "loaded": false,
                                "missing": false,
                                "name": "recorded future",
                                "output": [
                                    {
                                        "contains": [
                                            "recordedfuture result status"
                                        ],
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "hash",
                                            "sha256",
                                            "sha1",
                                            "md5"
                                        ],
                                        "data_path": "action_result.parameter.hash",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity id"
                                        ],
                                        "data_path": "action_result.data.*.entity.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "hash",
                                            "sha256",
                                            "sha1",
                                            "md5"
                                        ],
                                        "data_path": "action_result.data.*.entity.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity type"
                                        ],
                                        "data_path": "action_result.data.*.entity.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "Hash"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture hash algorithm"
                                        ],
                                        "data_path": "action_result.data.*.hashAlgorithm",
                                        "data_type": "string",
                                        "example_values": [
                                            "MD5"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture intelligence card url"
                                        ],
                                        "data_path": "action_result.data.*.intelCard",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture metrics type"
                                        ],
                                        "data_path": "action_result.data.*.metrics.*.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture metrics value"
                                        ],
                                        "data_path": "action_result.data.*.metrics.*.value",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture related entities count"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.entities.*.count",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity id"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.entities.*.entity.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity name"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.entities.*.entity.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity type"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.entities.*.entity.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture related entity type"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality"
                                        ],
                                        "data_path": "action_result.data.*.risk.criticality",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality label"
                                        ],
                                        "data_path": "action_result.data.*.risk.criticalityLabel",
                                        "data_type": "string",
                                        "example_values": [
                                            "Very Malicious"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.criticality",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality label"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.criticalityLabel",
                                        "data_type": "string",
                                        "example_values": [
                                            "Unusual"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence string"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.evidenceString",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture mitigation string"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.mitigationString",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence rule"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.rule",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence timestamp"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.timestamp",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk string"
                                        ],
                                        "data_path": "action_result.data.*.risk.riskString",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk summary"
                                        ],
                                        "data_path": "action_result.data.*.risk.riskSummary",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk rules"
                                        ],
                                        "data_path": "action_result.data.*.risk.rules",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk score"
                                        ],
                                        "data_path": "action_result.data.*.risk.score",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence firstseen"
                                        ],
                                        "data_path": "action_result.data.*.timestamps.firstSeen",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence lastseen"
                                        ],
                                        "data_path": "action_result.data.*.timestamps.lastSeen",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality label"
                                        ],
                                        "data_path": "action_result.summary.criticalityLabel",
                                        "data_type": "string",
                                        "example_values": [
                                            "Malicious"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence lastseen"
                                        ],
                                        "data_path": "action_result.summary.lastSeen",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk summary"
                                        ],
                                        "data_path": "action_result.summary.riskSummary",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture result message"
                                        ],
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture total objects"
                                        ],
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture total objects successful"
                                        ],
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "hash": {
                                        "contains": [
                                            "hash",
                                            "sha256",
                                            "sha1",
                                            "md5"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "File hash to query",
                                        "key": "hash",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Recorded Future App for Phantom",
                                "product_vendor": "Recorded Future, Inc",
                                "targets": "19",
                                "type": "reputation"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "file intelligence"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def file_intelligence(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('file_intelligence() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'file_intelligence' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_list:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'file_intelligence' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'hash': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"file intelligence\", parameters=parameters, assets=['recorded future'], callback=intel_format, name=\"file_intelligence\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge list",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "file intelligence",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "cc64ef72-b0d9-4d5b-babf-84b7d9a1582c",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 97,
                        "line_end": 107,
                        "line_start": 86,
                        "message": "Configuring now",
                        "name": "file intelligence",
                        "notes": "Gets intelligence for the fileHash provided from Recorded Future",
                        "number": 1,
                        "order": 5,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 360,
                            "y": 160
                        },
                        "previous_function": "",
                        "previous_name": "file_intelligence",
                        "required_params": {
                            "hash": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 594
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "bf3004d1-c69e-4d6c-93cd-376e094290e9",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "571ee01f-7cef-4f30-b126-0ab3b76dff25",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d1cfac8b-f50e-41c7-bd6d-2d1a37ef1ad6",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 596
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ec6c205a-7458-4944-91d1-fdc8a23ac8c8",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "2e08bb76-1525-4612-ac24-f813b75d0e56",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d1cfac8b-f50e-41c7-bd6d-2d1a37ef1ad6",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 598
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "7a3e688c-2cf3-4419-a957-0923cacfbc09",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0bf4bc4e-04e8-4b45-be55-deaaa3f1626e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d1cfac8b-f50e-41c7-bd6d-2d1a37ef1ad6",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 599
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ca885efc-ab68-4546-89d1-2bc7a814ce08",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d1cfac8b-f50e-41c7-bd6d-2d1a37ef1ad6",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 600
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "reputation format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def reputation_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('reputation_format() called')\n    \n    template = \"\"\"%%\n### VirusTotal Summary of {0}: *{1}, {2}*\n\n*VTI link: {3}*\n\nScan Date: {4}\n- sha1: {5}\n- sha256: {6}\n\n| Scanner | Detected | Result |\n| ---- | ---- | ---- |\n| CrowdStrike | {7} | {8} |\n| Cylance | {9} | {10} |\n| ESET | {11} | {12} |\n| FireEye | {13} | {14} |\n| MalwareBytes | {15} | {16} |\n| McAfee | {17} | {18} | \n| McAfee Gateway | {19} | {20} |\n| Microsoft | {21} | {22} |\n| Symantec | {23} | {24} | \n| Sophos | {25} | {26}\n\n---\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"file_reputation:action_result.parameter.hash\",\n        \"file_reputation:action_result.message\",\n        \"file_reputation:action_result.data.*.verbose_msg\",\n        \"file_reputation:action_result.data.*.permalink\",\n        \"file_reputation:action_result.data.*.scan_date\",\n        \"file_reputation:action_result.data.*.sha1\",\n        \"file_reputation:action_result.data.*.sha256\",\n        \"file_reputation:action_result.data.*.scans.CrowdStrike.detected\",\n        \"file_reputation:action_result.data.*.scans.CrowdStrike.result\",\n        \"file_reputation:action_result.data.*.scans.Cylance.detected\",\n        \"file_reputation:action_result.data.*.scans.Cylance.result\",\n        \"file_reputation:action_result.data.*.scans.ESET-NOD32.detected\",\n        \"file_reputation:action_result.data.*.scans.ESET-NOD32.result\",\n        \"file_reputation:action_result.data.*.scans.FireEye.detected\",\n        \"file_reputation:action_result.data.*.scans.FireEye.result\",\n        \"file_reputation:action_result.data.*.scans.Malwarebytes.detected\",\n        \"file_reputation:action_result.data.*.scans.Malwarebytes.result\",\n        \"file_reputation:action_result.data.*.scans.McAfee.detected\",\n        \"file_reputation:action_result.data.*.scans.McAfee.result\",\n        \"file_reputation:action_result.data.*.scans.McAfee-GW-Edition.detected\",\n        \"file_reputation:action_result.data.*.scans.McAfee-GW-Edition.result\",\n        \"file_reputation:action_result.data.*.scans.Microsoft.detected\",\n        \"file_reputation:action_result.data.*.scans.Microsoft.result\",\n        \"file_reputation:action_result.data.*.scans.Symantec.detected\",\n        \"file_reputation:action_result.data.*.scans.Symantec.result\",\n        \"file_reputation:action_result.data.*.scans.Sophos.detected\",\n        \"file_reputation:action_result.data.*.scans.Sophos.result\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"reputation_format\")\n\n    join_indicator_analysis(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "file reputation",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "reputation format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "571ee01f-7cef-4f30-b126-0ab3b76dff25",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 315,
                        "line_start": 250,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Create reputation information format for note",
                        "number": 10,
                        "order": 7,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "file_reputation:action_result.parameter.hash"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "file_reputation:action_result.message"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.verbose_msg"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.permalink"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scan_date"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.sha1"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.sha256"
                            },
                            {
                                "position": 7,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.CrowdStrike.detected"
                            },
                            {
                                "position": 8,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.CrowdStrike.result"
                            },
                            {
                                "position": 9,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.Cylance.detected"
                            },
                            {
                                "position": 10,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.Cylance.result"
                            },
                            {
                                "position": 11,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.ESET-NOD32.detected"
                            },
                            {
                                "position": 12,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.ESET-NOD32.result"
                            },
                            {
                                "position": 13,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.FireEye.detected"
                            },
                            {
                                "position": 14,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.FireEye.result"
                            },
                            {
                                "position": 15,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.Malwarebytes.detected"
                            },
                            {
                                "position": 16,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.Malwarebytes.result"
                            },
                            {
                                "position": 17,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.McAfee.detected"
                            },
                            {
                                "position": 18,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.McAfee.result"
                            },
                            {
                                "position": 19,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.McAfee-GW-Edition.detected"
                            },
                            {
                                "position": 20,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.McAfee-GW-Edition.result"
                            },
                            {
                                "position": 21,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.Microsoft.detected"
                            },
                            {
                                "position": 22,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.Microsoft.result"
                            },
                            {
                                "position": 23,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.Symantec.detected"
                            },
                            {
                                "position": 24,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.Symantec.result"
                            },
                            {
                                "position": 25,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.Sophos.detected"
                            },
                            {
                                "position": 26,
                                "type": "",
                                "value": "file_reputation:action_result.data.*.scans.Sophos.result"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "reputation_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### VirusTotal Summary of {0}: *{1}, {2}*\n\n*VTI link: {3}*\n\nScan Date: {4}\n- sha1: {5}\n- sha256: {6}\n\n| Scanner | Detected | Result |\n| ---- | ---- | ---- |\n| CrowdStrike | {7} | {8} |\n| Cylance | {9} | {10} |\n| ESET | {11} | {12} |\n| FireEye | {13} | {14} |\n| MalwareBytes | {15} | {16} |\n| McAfee | {17} | {18} | \n| McAfee Gateway | {19} | {20} |\n| Microsoft | {21} | {22} |\n| Symantec | {23} | {24} | \n| Sophos | {25} | {26}\n\n---\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 601
                    },
                    {
                        "action": "file reputation",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "hash": "merge_list:custom_function_result.data.*.item",
                            "ip": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.sourceAddress"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "file reputation",
                                "actions": [
                                    "detonate url",
                                    "detonate file",
                                    "get report",
                                    "get file",
                                    "ip reputation",
                                    "domain reputation",
                                    "url reputation",
                                    "file reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "VirusTotal",
                                "app_version": "2.0.8",
                                "appid": "11f676a4-f3d4-4db0-8587-f4e942c07c7c",
                                "asset_name": "test2",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "hash": "merge_list:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 7,
                                "loaded": false,
                                "missing": false,
                                "name": "virustotal",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "hash",
                                            "sha256",
                                            "sha1",
                                            "md5"
                                        ],
                                        "data_path": "action_result.parameter.hash",
                                        "data_type": "string",
                                        "example_values": [
                                            "6c1948f7edf115cd1f13cd170b882077930be150"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "hash",
                                            "md5"
                                        ],
                                        "data_path": "action_result.data.*.md5",
                                        "data_type": "string",
                                        "example_values": [
                                            "494303294715f5ffad7ad3f43b73b00b"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.permalink",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://www.test.com/file/27ce020f7cdb4b775b80bd6e3ef1d16079401e0d45cfd28ffbd8c63ff2ddf7d7/analysis/1548112684/"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            64
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha1"
                                        ],
                                        "data_path": "action_result.data.*.resource",
                                        "data_type": "string",
                                        "example_values": [
                                            "6c1948f7edf115cd1f13cd170b882077930be150"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scan_date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-01-21 23:18:04"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "virustotal scan id"
                                        ],
                                        "data_path": "action_result.data.*.scan_id",
                                        "data_type": "string",
                                        "example_values": [
                                            "27ce020f7cdb4b775b80bd6e3ef1d16079401e0d45cfd28ffbd8c63ff2ddf7d7-1548112684"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.*.detected",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.*.result",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.*.update",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.*.version",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ALYac.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ALYac.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Parite.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ALYac.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.ALYac.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.1.1.5"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AVG.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AVG.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32:Parite"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AVG.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AVG.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "18.4.3895.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AVware.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AVware.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Parite.b (v)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AVware.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20180925"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.AVware.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.6.0.52"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Acronis.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Acronis.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "suspicious"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Acronis.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190119"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Acronis.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0.1.37"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Ad-Aware.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Ad-Aware.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Parite.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Ad-Aware.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Ad-Aware.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "3.0.5.370"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AegisLab.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AegisLab.result",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AegisLab.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AegisLab.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "4.2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AhnLab-V3.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AhnLab-V3.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32/Parite"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AhnLab-V3.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.AhnLab-V3.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "3.14.1.22785"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Alibaba.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Alibaba.result",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Alibaba.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20180921"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Alibaba.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "0.1.0.2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Antiy-AVL.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Antiy-AVL.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus/Win32.Parite.c"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Antiy-AVL.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Antiy-AVL.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "3.0.0.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Arcabit.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Arcabit.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Parite.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Arcabit.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Arcabit.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0.0.837"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Avast-Mobile.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Avast-Mobile.result",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Avast-Mobile.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Avast-Mobile.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "190121-00"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Avast.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Avast.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32:Parite"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Avast.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Avast.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "18.4.3895.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Avira.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Avira.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "W32/Parite"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Avira.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Avira.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "8.3.3.8"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Babable.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Babable.result",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Babable.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20180918"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Babable.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "9107201"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Baidu.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Baidu.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Virus.Parite.d"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Baidu.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Baidu.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0.0.2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.BitDefender.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.BitDefender.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Parite.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.BitDefender.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.BitDefender.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "7.2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Bkav.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Bkav.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "W32.Pinfi.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Bkav.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Bkav.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.3.0.9899"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.CAT-QuickHeal.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.CAT-QuickHeal.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "W32.Perite.A"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.CAT-QuickHeal.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.CAT-QuickHeal.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "14.00"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.CMC.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.CMC.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus.Win32.Parite.b!O"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.CMC.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.CMC.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.1.0.977"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ClamAV.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ClamAV.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Heuristics.W32.Parite.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ClamAV.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.ClamAV.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "0.101.1.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Comodo.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Comodo.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Malware@#1b1651nqd7ivb"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Comodo.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Comodo.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "30310"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.CrowdStrike.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.CrowdStrike.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "malicious_confidence_100% (W)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.CrowdStrike.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20181023"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.CrowdStrike.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Cybereason.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Cybereason.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "malicious.94715f"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Cybereason.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190109"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Cybereason.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.2.27"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Cylance.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Cylance.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Unsafe"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Cylance.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190122"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Cylance.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "2.3.1.101"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Cyren.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Cyren.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "W32/Virut.E.gen!Eldorado"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Cyren.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Cyren.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "6.2.0.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.DrWeb.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.DrWeb.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Trojan.DownLoader20.25948"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.DrWeb.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.DrWeb.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "7.0.34.11020"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ESET-NOD32.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ESET-NOD32.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32/Parite.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ESET-NOD32.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ESET-NOD32.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "18744"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Emsisoft.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Emsisoft.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Parite.B (B)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Emsisoft.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Emsisoft.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "2018.4.0.1029"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Endgame.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Endgame.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "malicious (high confidence)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Endgame.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20181108"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Endgame.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "3.0.2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.F-Prot.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.F-Prot.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "W32/Virut.E.gen!Eldorado"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.F-Prot.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.F-Prot.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "4.7.1.166"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.F-Secure.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.F-Secure.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Parite.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.F-Secure.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.F-Secure.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "11.0.19100.45"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Fortinet.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Fortinet.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "W32/Parite.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Fortinet.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Fortinet.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "5.4.247.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.GData.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.GData.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Parite.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.GData.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.GData.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "A:25.20275B:25.14197"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Ikarus.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Ikarus.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus.Win32.Virut"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Ikarus.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Ikarus.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "0.1.5.2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Invincea.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Invincea.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "heuristic"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Invincea.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20181128"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Invincea.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "6.3.6.26157"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Jiangmin.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Jiangmin.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32/Parite.b"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Jiangmin.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Jiangmin.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "16.0.100"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.K7AntiVirus.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.K7AntiVirus.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus ( 00001b711 )"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.K7AntiVirus.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.K7AntiVirus.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "11.24.29740"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.K7GW.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.K7GW.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus ( 00001b711 )"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.K7GW.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.K7GW.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "11.24.29740"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Kaspersky.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Kaspersky.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus.Win32.Parite.b"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Kaspersky.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Kaspersky.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "15.0.1.13"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Kingsoft.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Kingsoft.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Parite.b.5756"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Kingsoft.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190122"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Kingsoft.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "2013.8.14.323"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.MAX.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.MAX.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "malware (ai score=100)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.MAX.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190122"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.MAX.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "2018.9.12.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Malwarebytes.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Malwarebytes.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Trojan.Agent.QQ"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Malwarebytes.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190122"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Malwarebytes.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "2.1.1.1115"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.McAfee-GW-Edition.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.McAfee-GW-Edition.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "BehavesLike.Win32.Pate.hh"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.McAfee-GW-Edition.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.McAfee-GW-Edition.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "v2017.3010"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.McAfee.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.McAfee.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "W32/Pate.b"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.McAfee.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.McAfee.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "6.0.6.653"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.MicroWorld-eScan.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.MicroWorld-eScan.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Parite.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.MicroWorld-eScan.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.MicroWorld-eScan.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "14.0.297.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Microsoft.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Microsoft.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus:Win32/Parite.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Microsoft.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Microsoft.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.1.15500.2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.NANO-Antivirus.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.NANO-Antivirus.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus.Win32.Parite.bgvo"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.NANO-Antivirus.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.NANO-Antivirus.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0.134.24576"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Paloalto.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Paloalto.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "generic.ml"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Paloalto.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190122"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Paloalto.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Panda.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Panda.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "W32/Parite.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Panda.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Panda.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "4.6.4.2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Qihoo-360.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Qihoo-360.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus.Win32.Parite.H"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Qihoo-360.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190122"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Qihoo-360.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0.0.1120"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Rising.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Rising.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus.Parite!1.9B80 (CLOUD)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Rising.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190122"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Rising.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "25.0.0.24"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.SUPERAntiSpyware.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.SUPERAntiSpyware.result",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.SUPERAntiSpyware.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190116"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.SUPERAntiSpyware.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "5.6.0.1032"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.SentinelOne.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.SentinelOne.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "static engine - malicious"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.SentinelOne.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190118"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.SentinelOne.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0.21.268"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Sophos.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Sophos.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "W32/Parite-B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Sophos.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Sophos.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "4.98.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Symantec.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Symantec.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Trojan.Gen.6"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Symantec.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Symantec.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.8.0.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TACHYON.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TACHYON.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus/W32.Parite.C"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TACHYON.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TACHYON.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-01-21.02"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Tencent.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Tencent.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus.Win32.Dropper.c"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Tencent.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190122"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Tencent.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0.0.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TheHacker.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TheHacker.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "W32/Pate.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TheHacker.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190118"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TheHacker.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "6.8.0.5.3962"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TotalDefense.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TotalDefense.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32/Pinfi.A"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TotalDefense.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.TotalDefense.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "37.1.62.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Trapmine.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Trapmine.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "malicious.high.ml.score"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Trapmine.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190103"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Trapmine.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "3.0.34.707"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TrendMicro-HouseCall.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TrendMicro-HouseCall.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "PE_PARITE.A"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TrendMicro-HouseCall.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TrendMicro-HouseCall.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "10.0.0.1040"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TrendMicro.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TrendMicro.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "PE_PARITE.A"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TrendMicro.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.TrendMicro.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "10.0.0.1040"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Trustlook.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Trustlook.result",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Trustlook.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190122"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Trustlook.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.VBA32.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.VBA32.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus.Win32.Parite.b"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.VBA32.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.VBA32.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "3.35.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.VIPRE.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.VIPRE.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Parite.b (v)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.VIPRE.update",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.VIPRE.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "None"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ViRobot.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ViRobot.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Parite.A"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ViRobot.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ViRobot.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "2014.3.20.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Webroot.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Webroot.result",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Webroot.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190122"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Webroot.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0.0.403"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Yandex.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Yandex.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Parite.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Yandex.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190120"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.scans.Yandex.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "5.5.1.3"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Zillya.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Zillya.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus.Parite.Win32.9"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Zillya.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190118"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Zillya.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "2.0.0.3733"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ZoneAlarm.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ZoneAlarm.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virus.Win32.Parite.b"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ZoneAlarm.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.ZoneAlarm.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Zoner.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Zoner.result",
                                        "data_type": "string",
                                        "example_values": [
                                            "Win32.Parite.B"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Zoner.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190121"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.Zoner.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.eGambit.detected",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.eGambit.result",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.eGambit.update",
                                        "data_type": "string",
                                        "example_values": [
                                            "20190122"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.eGambit.version",
                                        "data_type": "string",
                                        "example_values": [
                                            "v4.3.5"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "hash",
                                            "sha1"
                                        ],
                                        "data_path": "action_result.data.*.sha1",
                                        "data_type": "string",
                                        "example_values": [
                                            "6c1948f7edf115cd1f13cd170b882077930be150"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "hash",
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "27ce020f7cdb4b775b80bd6e3ef1d16079401e0d45cfd28ffbd8c63ff2ddf7d7"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            72
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.verbose_msg",
                                        "data_type": "string",
                                        "example_values": [
                                            "Scan finished, information embedded"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            64
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.total_scans",
                                        "data_type": "numeric",
                                        "example_values": [
                                            72
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Positives: 64, Total scans: 72"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "hash": {
                                        "contains": [
                                            "hash",
                                            "sha256",
                                            "sha1",
                                            "md5"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "File hash to query",
                                        "key": "hash",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "VirusTotal",
                                "product_vendor": "VirusTotal",
                                "targets": "7",
                                "type": "reputation"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "file reputation"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def file_reputation(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('file_reputation() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'file_reputation' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_list:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'file_reputation' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'hash': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"file reputation\", parameters=parameters, assets=['virustotal'], callback=reputation_format, name=\"file_reputation\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge list",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "file reputation",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0413c9fc-fee8-433f-ab45-9458da4c6133",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 86,
                        "line_start": 65,
                        "message": "Configuring now",
                        "name": "file reputation",
                        "notes": "Gets IP reputation for the destinationAddress  provided from VirusTotal",
                        "number": 2,
                        "order": 4,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 360,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "file_reputation",
                        "required_params": {
                            "hash": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 621
                    },
                    {
                        ".scmName/text": "community",
                        "active": false,
                        "active_keys": {},
                        "active_values": {},
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".customFunction": {
                                "text": "merge list"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".scmName": {
                                "text": "community"
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            ".title-info": {
                                "text": ""
                            },
                            "g.branch image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def merge_list(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('merge_list() called')\n    \n    filtered_artifacts_data_0 = phantom.collect2(container=container, datapath=['filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHash', 'filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHashMd5', 'filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHashSha1', 'filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHashSha256', 'filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHashSha512', 'filtered-data:fileHash_filter:condition_1:artifact:*.cef.hash'])\n\n    parameters = []\n\n    filtered_artifacts_data_0_0 = [item[0] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_1 = [item[1] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_2 = [item[2] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_3 = [item[3] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_4 = [item[4] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_5 = [item[5] for item in filtered_artifacts_data_0]\n\n    parameters.append({\n        'input_1': filtered_artifacts_data_0_0,\n        'input_2': filtered_artifacts_data_0_1,\n        'input_3': filtered_artifacts_data_0_2,\n        'input_4': filtered_artifacts_data_0_3,\n        'input_5': filtered_artifacts_data_0_4,\n        'input_6': filtered_artifacts_data_0_5,\n        'input_7': None,\n        'input_8': None,\n        'input_9': None,\n        'input_10': None,\n    })\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################    \n\n    # call custom function \"community/list_merge\", returns the custom_function_run_id\n    phantom.custom_function(custom_function='community/list_merge', parameters=parameters, name='merge_list', callback=merge_list_callback)\n\n    return",
                        "callback_code": "def merge_list_callback(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('merge_list_callback() called')\n    \n    file_reputation(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n    hunt_hash(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n    file_intelligence(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_start": 491,
                        "callsback": true,
                        "cfDisplayPath": "community/list_merge",
                        "cfInputs": {
                            "input_1": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHash",
                                "paramName": "filtered_artifacts_data_0_0",
                                "type": "list"
                            },
                            "input_10": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_2": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHashMd5",
                                "paramName": "filtered_artifacts_data_0_1",
                                "type": "list"
                            },
                            "input_3": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHashSha1",
                                "paramName": "filtered_artifacts_data_0_2",
                                "type": "list"
                            },
                            "input_4": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHashSha256",
                                "paramName": "filtered_artifacts_data_0_3",
                                "type": "list"
                            },
                            "input_5": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHashSha512",
                                "paramName": "filtered_artifacts_data_0_4",
                                "type": "list"
                            },
                            "input_6": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.hash",
                                "paramName": "filtered_artifacts_data_0_5",
                                "type": "list"
                            },
                            "input_7": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_8": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_9": {
                                "dataPath": "",
                                "type": "list"
                            }
                        },
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "currentVersion": true,
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 29,
                        "customFunction": "community/list_merge",
                        "customFunctionId": null,
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "merge list",
                        "delay": 0,
                        "description": "You may need to remove some hashes for the applications you are trying to use.  Like Anomali only use MD5/SHA1 for example.",
                        "draftMode": false,
                        "existingCF": true,
                        "functionBlock": "custom function",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "652ffe24-4688-41be-8575-9774f968d7a0",
                        "inPorts": [
                            "in"
                        ],
                        "input_1-0": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHash",
                        "input_2-1": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHashMd5",
                        "input_3-2": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHashSha1",
                        "input_4-3": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHashSha256",
                        "input_5-4": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.fileHashSha512",
                        "input_6-5": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.hash",
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 500,
                        "line_start": 450,
                        "message": "Configuring now",
                        "name": "list_merge",
                        "notes": "Merge and dedup url indicators into a single item list",
                        "number": 1,
                        "order": 12,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 100,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "merge_list",
                        "selectedCustomFunction": {
                            "description": "Merge 2-10 different data paths into a single output data path. For example, if IP addresses are stored in the fields sourceAddress, destinationAddress, and deviceAddress, then those three fields could be merged together to form a single list of IP addresses.",
                            "draftMode": false,
                            "id": 33,
                            "inputs": [
                                {
                                    "_pretty_custom_function": "list_merge",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 33,
                                    "description": "",
                                    "id": 82,
                                    "input_type": "list",
                                    "name": "input_1",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 33,
                                    "description": "",
                                    "id": 83,
                                    "input_type": "list",
                                    "name": "input_2",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 33,
                                    "description": "",
                                    "id": 84,
                                    "input_type": "list",
                                    "name": "input_3",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 33,
                                    "description": "",
                                    "id": 85,
                                    "input_type": "list",
                                    "name": "input_4",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 33,
                                    "description": "",
                                    "id": 86,
                                    "input_type": "list",
                                    "name": "input_5",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 33,
                                    "description": "",
                                    "id": 87,
                                    "input_type": "list",
                                    "name": "input_6",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 33,
                                    "description": "",
                                    "id": 88,
                                    "input_type": "list",
                                    "name": "input_7",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 33,
                                    "description": "",
                                    "id": 89,
                                    "input_type": "list",
                                    "name": "input_8",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 33,
                                    "description": "",
                                    "id": 90,
                                    "input_type": "list",
                                    "name": "input_9",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 33,
                                    "description": "",
                                    "id": 91,
                                    "input_type": "list",
                                    "name": "input_10",
                                    "placeholder": ""
                                }
                            ],
                            "name": "list_merge",
                            "outputs": [
                                {
                                    "_pretty_custom_function": "list_merge",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 33,
                                    "data_path": "*.item",
                                    "description": "A combined list of all the values from all the input lists",
                                    "id": 69
                                }
                            ],
                            "playbooks": {
                                "draft_playbooks": [],
                                "draft_version_id": null,
                                "playbooks": []
                            },
                            "scmId": 45,
                            "scmName": "community"
                        },
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "repo",
                        "status": "",
                        "title": "custom function",
                        "type": "coa.CustomFunctionBlock",
                        "userGeneratedCode": "    # Write your custom code here...",
                        "warn": false,
                        "z": 627
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "indicator analysis"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def indicator_analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('indicator_analysis() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['file_reputation:action_result.parameter.hash', 'file_reputation:action_result.summary.positives'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['hunt_hash:action_result.parameter.hash', 'hunt_hash:action_result.data.*.threat_score', 'hunt_hash:action_result.data.*.verdict'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['file_intelligence:action_result.parameter.hash', 'file_intelligence:action_result.data.*.risk.score', 'file_intelligence:action_result.data.*.risk.criticalityLabel'], action_results=results)\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_list:custom_function_result.data.*.item'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_2_1 = [item[1] for item in results_data_2]\n    results_item_2_2 = [item[2] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n    results_item_3_1 = [item[1] for item in results_data_3]\n    results_item_3_2 = [item[2] for item in results_data_3]\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    indicator_analysis__analysis = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Debug data inputs \n    \n    #phantom.debug(\"URL data\")\n    #phantom.debug(custom_function_results_data_1)\n    indicator = custom_function_results_data_1\n    \n    #phantom.debug(\"Reputation data\")\n    #phantom.debug(results_data_1)\n    rep_data = results_data_1\n    \n    #phantom.debug(\"Detonated data\")\n    #phantom.debug(results_data_2)\n    detonate_data = results_data_2\n    \n    #phantom.debug(\"Intel data\")\n    #phantom.debug(results_data_3)\n    risk_data = results_data_3\n\n    # Prepare objects for finished analysis\n    indicator_analysis__analysis = []\n    threat_level = {\n        'title':\"\",\n        'indicator':\"\",\n        'confidence':\"Low\",\n        'threat':\"Low\"\n        }\n\n    \"\"\" Calculations for Intelligence Assessment\n    Get the result information and performs the following calculation:\n\n    Threat: Values = \"High\", \"Med\", \"Low\"\n    Type of validation from source\n        High: VT >5 detected downloaded samples, Hybrid-Analysis Threat Score >50  AND RF= Very Malicious, Malicious, Risk score >50 OR FEYE Detection\n        Med: (VT >5 detected downloaded samples, Hybrid-Analysis Threat Score >50 AND/OR RF= Unusual, Suspicious, Risk score <50) OR FEYE Detection\n        Low: VT >5 detected downloaded samples, Hybrid-Analysis Threat Score >50 OR RF= Unusual, Suspicious, Risk score <50\n\n    Confidence: Detection on # of sources\n        High >2 Sources or Finished Intel\n        Med  =2 Sources\n        Low  <1 Source\n    \"\"\"\n    rep_level = 5\n    risk_level = 50\n    high_risk = ['Very Malicious','Malicious']\n    med_risk = [\"Suspicious\", 'Unusual']\n    \n    for item in indicator:\n        threat_level['indicator'] = item[0]\n        phantom.debug('Analyzing indicator: {}'.format(threat_level['indicator']))\n        # Evaluates Reputation data\n        for rep in rep_data:\n            #phantom.debug(rep)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if rep[0] == item[0] and rep[1] >= rep_level:\n                threat_level['threat'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n            \n        for detonate in detonate_data:\n            #phantom.debug(detonate)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if detonate[0] == item[0] and (detonate[1] >= risk_level or detonate[2] in ['Suspicious']):\n                threat_level['threat'] = \"Medium\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            elif detonate[0] == item[0] and detonate[2] in ['Malicious']:\n                threat_level['threat'] = \"High\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n                \n        # Evaluate risk score or label\n        for risk in risk_data:\n            # Evaluates Risk Score\n            #phantom.debug(risk)\n            if risk[0] == item[0] and risk[1] > risk_level:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('Risk score found: {} | {} and setting threat to {}'.format(risk[0],risk[1],threat_level['threat']))\n            # Evaluates Risk Label\n            elif risk[0] == item[0] and risk[2] in high_risk:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('High Risk label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n                else:\n                    threat_level['threat'] = \"Medium\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            elif risk[0] == item[0] and risk[2] in med_risk:\n                if threat_level['threat'] == \"Low\":\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            #phantom.debug('Risk analysis update: {} | {}/{} with threat: {} | confidence {}'.format(risk[0],risk[1],risk[2],threat_level['threat'],threat_level['confidence']))\n\n        # Create title for note\n        threat_level['title'] = \"Analysis of Indicator: {} | Threat: {} | Confidence: {}\".format(threat_level['indicator'], threat_level['threat'], threat_level['confidence'])\n        phantom.debug(threat_level['title'])\n        \n        # Append output value for integration\n        indicator_analysis__analysis.append({\n            'title':threat_level['title'],\n            'indicator':threat_level['indicator'],\n            'confidence':threat_level['confidence'],\n            'threat':threat_level['threat']\n        })\n\n    #phantom.debug('This is indicator analysis below:')\n    #phantom.debug(indicator_analysis__analysis)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='indicator_analysis:analysis', value=json.dumps(indicator_analysis__analysis))\n    generate_task_notes(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "file reputation, hunt hash, file intelligence",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 22,
                        "custom_callback": "",
                        "custom_code": "def indicator_analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('indicator_analysis() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['file_reputation:action_result.parameter.hash', 'file_reputation:action_result.summary.positives'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['hunt_hash:action_result.parameter.hash', 'hunt_hash:action_result.data.*.threat_score', 'hunt_hash:action_result.data.*.verdict'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['file_intelligence:action_result.parameter.hash', 'file_intelligence:action_result.data.*.risk.score', 'file_intelligence:action_result.data.*.risk.criticalityLabel'], action_results=results)\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_list:custom_function_result.data.*.item'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_2_1 = [item[1] for item in results_data_2]\n    results_item_2_2 = [item[2] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n    results_item_3_1 = [item[1] for item in results_data_3]\n    results_item_3_2 = [item[2] for item in results_data_3]\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    indicator_analysis__analysis = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Debug data inputs \n    \n    #phantom.debug(\"URL data\")\n    #phantom.debug(custom_function_results_data_1)\n    indicator = custom_function_results_data_1\n    \n    #phantom.debug(\"Reputation data\")\n    #phantom.debug(results_data_1)\n    rep_data = results_data_1\n    \n    #phantom.debug(\"Detonated data\")\n    #phantom.debug(results_data_2)\n    detonate_data = results_data_2\n    \n    #phantom.debug(\"Intel data\")\n    #phantom.debug(results_data_3)\n    risk_data = results_data_3\n\n    # Prepare objects for finished analysis\n    indicator_analysis__analysis = []\n    threat_level = {\n        'title':\"\",\n        'indicator':\"\",\n        'confidence':\"Low\",\n        'threat':\"Low\"\n        }\n\n    \"\"\" Calculations for Intelligence Assessment\n    Get the result information and performs the following calculation:\n\n    Threat: Values = \"High\", \"Med\", \"Low\"\n    Type of validation from source\n        High: VT >5 detected downloaded samples, Hybrid-Analysis Threat Score >50  AND RF= Very Malicious, Malicious, Risk score >50 OR FEYE Detection\n        Med: (VT >5 detected downloaded samples, Hybrid-Analysis Threat Score >50 AND/OR RF= Unusual, Suspicious, Risk score <50) OR FEYE Detection\n        Low: VT >5 detected downloaded samples, Hybrid-Analysis Threat Score >50 OR RF= Unusual, Suspicious, Risk score <50\n\n    Confidence: Detection on # of sources\n        High >2 Sources or Finished Intel\n        Med  =2 Sources\n        Low  <1 Source\n    \"\"\"\n    rep_level = 5\n    risk_level = 50\n    high_risk = ['Very Malicious','Malicious']\n    med_risk = [\"Suspicious\", 'Unusual']\n    \n    for item in indicator:\n        threat_level['indicator'] = item[0]\n        phantom.debug('Analyzing indicator: {}'.format(threat_level['indicator']))\n        # Evaluates Reputation data\n        for rep in rep_data:\n            #phantom.debug(rep)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if rep[0] == item[0] and rep[1] >= rep_level:\n                threat_level['threat'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n            \n        for detonate in detonate_data:\n            #phantom.debug(detonate)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if detonate[0] == item[0] and (detonate[1] >= risk_level or detonate[2] in ['Suspicious']):\n                threat_level['threat'] = \"Medium\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            elif detonate[0] == item[0] and detonate[2] in ['Malicious']:\n                threat_level['threat'] = \"High\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n                \n        # Evaluate risk score or label\n        for risk in risk_data:\n            # Evaluates Risk Score\n            #phantom.debug(risk)\n            if risk[0] == item[0] and risk[1] > risk_level:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('Risk score found: {} | {} and setting threat to {}'.format(risk[0],risk[1],threat_level['threat']))\n            # Evaluates Risk Label\n            elif risk[0] == item[0] and risk[2] in high_risk:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('High Risk label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n                else:\n                    threat_level['threat'] = \"Medium\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            elif risk[0] == item[0] and risk[2] in med_risk:\n                if threat_level['threat'] == \"Low\":\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            #phantom.debug('Risk analysis update: {} | {}/{} with threat: {} | confidence {}'.format(risk[0],risk[1],risk[2],threat_level['threat'],threat_level['confidence']))\n\n        # Create title for note\n        threat_level['title'] = \"Analysis of Indicator: {} | Threat: {} | Confidence: {}\".format(threat_level['indicator'], threat_level['threat'], threat_level['confidence'])\n        phantom.debug(threat_level['title'])\n        \n        # Append output value for integration\n        indicator_analysis__analysis.append({\n            'title':threat_level['title'],\n            'indicator':threat_level['indicator'],\n            'confidence':threat_level['confidence'],\n            'threat':threat_level['threat']\n        })\n\n    #phantom.debug('This is indicator analysis below:')\n    #phantom.debug(indicator_analysis__analysis)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='indicator_analysis:analysis', value=json.dumps(indicator_analysis__analysis))\n    generate_task_notes(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "indicator analysis",
                        "description": "See the doc type in the source code for calculation parameters for this indicator",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d1cfac8b-f50e-41c7-bd6d-2d1a37ef1ad6",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_indicator_analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_indicator_analysis() called')\n\n    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed\n    if phantom.completed(action_names=['file_reputation', 'hunt_hash', 'file_intelligence']):\n        \n        # call connected block \"indicator_analysis\"\n        indicator_analysis(container=container, handle=handle)\n    \n    return",
                        "join_optional": [],
                        "join_start": 646,
                        "legacy": true,
                        "line_end": 657,
                        "line_start": 503,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Provide an analysis of the indicator based on the vendor provided threat assessment with the number of sources and confidence in that assessment by the prevalence of the indicator in more than one occurrence.",
                        "number": 2,
                        "order": 13,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "analysis"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "merge_list:custom_function_result.data.*.item"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "file_reputation:action_result.parameter.hash"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "file_reputation:action_result.summary.positives"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "hunt_hash:action_result.parameter.hash"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "hunt_hash:action_result.data.*.threat_score"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "hunt_hash:action_result.data.*.verdict"
                            },
                            {
                                "position": 6,
                                "type": "",
                                "value": "file_intelligence:action_result.parameter.hash"
                            },
                            {
                                "position": 7,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.score"
                            },
                            {
                                "position": 8,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.criticalityLabel"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 860,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "indicator_analysis",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Debug data inputs \n    \n    #phantom.debug(\"URL data\")\n    #phantom.debug(custom_function_results_data_1)\n    indicator = custom_function_results_data_1\n    \n    #phantom.debug(\"Reputation data\")\n    #phantom.debug(results_data_1)\n    rep_data = results_data_1\n    \n    #phantom.debug(\"Detonated data\")\n    #phantom.debug(results_data_2)\n    detonate_data = results_data_2\n    \n    #phantom.debug(\"Intel data\")\n    #phantom.debug(results_data_3)\n    risk_data = results_data_3\n\n    # Prepare objects for finished analysis\n    indicator_analysis__analysis = []\n    threat_level = {\n        'title':\"\",\n        'indicator':\"\",\n        'confidence':\"Low\",\n        'threat':\"Low\"\n        }\n\n    \"\"\" Calculations for Intelligence Assessment\n    Get the result information and performs the following calculation:\n\n    Threat: Values = \"High\", \"Med\", \"Low\"\n    Type of validation from source\n        High: VT >5 detected downloaded samples, Hybrid-Analysis Threat Score >50  AND RF= Very Malicious, Malicious, Risk score >50 OR FEYE Detection\n        Med: (VT >5 detected downloaded samples, Hybrid-Analysis Threat Score >50 AND/OR RF= Unusual, Suspicious, Risk score <50) OR FEYE Detection\n        Low: VT >5 detected downloaded samples, Hybrid-Analysis Threat Score >50 OR RF= Unusual, Suspicious, Risk score <50\n\n    Confidence: Detection on # of sources\n        High >2 Sources or Finished Intel\n        Med  =2 Sources\n        Low  <1 Source\n    \"\"\"\n    rep_level = 5\n    risk_level = 50\n    high_risk = ['Very Malicious','Malicious']\n    med_risk = [\"Suspicious\", 'Unusual']\n    \n    for item in indicator:\n        threat_level['indicator'] = item[0]\n        phantom.debug('Analyzing indicator: {}'.format(threat_level['indicator']))\n        # Evaluates Reputation data\n        for rep in rep_data:\n            #phantom.debug(rep)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if rep[0] == item[0] and rep[1] >= rep_level:\n                threat_level['threat'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n            \n        for detonate in detonate_data:\n            #phantom.debug(detonate)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if detonate[0] == item[0] and (detonate[1] >= risk_level or detonate[2] in ['Suspicious']):\n                threat_level['threat'] = \"Medium\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            elif detonate[0] == item[0] and detonate[2] in ['Malicious']:\n                threat_level['threat'] = \"High\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n                \n        # Evaluate risk score or label\n        for risk in risk_data:\n            # Evaluates Risk Score\n            #phantom.debug(risk)\n            if risk[0] == item[0] and risk[1] > risk_level:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('Risk score found: {} | {} and setting threat to {}'.format(risk[0],risk[1],threat_level['threat']))\n            # Evaluates Risk Label\n            elif risk[0] == item[0] and risk[2] in high_risk:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('High Risk label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n                else:\n                    threat_level['threat'] = \"Medium\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            elif risk[0] == item[0] and risk[2] in med_risk:\n                if threat_level['threat'] == \"Low\":\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            #phantom.debug('Risk analysis update: {} | {}/{} with threat: {} | confidence {}'.format(risk[0],risk[1],risk[2],threat_level['threat'],threat_level['confidence']))\n\n        # Create title for note\n        threat_level['title'] = \"Analysis of Indicator: {} | Threat: {} | Confidence: {}\".format(threat_level['indicator'], threat_level['threat'], threat_level['confidence'])\n        phantom.debug(threat_level['title'])\n        \n        # Append output value for integration\n        indicator_analysis__analysis.append({\n            'title':threat_level['title'],\n            'indicator':threat_level['indicator'],\n            'confidence':threat_level['confidence'],\n            'threat':threat_level['threat']\n        })\n\n    #phantom.debug('This is indicator analysis below:')\n    #phantom.debug(indicator_analysis__analysis)\n\n",
                        "warn": false,
                        "z": 628
                    },
                    {
                        "action": "hunt hash",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "hash": "merge_list:custom_function_result.data.*.item",
                            "ip": "filtered-data:fileHash_filter:condition_1:artifact:*.cef.sourceAddress"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "hunt hash",
                                "actions": [
                                    "test connectivity",
                                    "detonate file",
                                    "detonate online file",
                                    "detonate url",
                                    "check url hash",
                                    "check status",
                                    "get report",
                                    "get file",
                                    "get pcap",
                                    "get file from url",
                                    "hunt url",
                                    "hunt domain",
                                    "hunt malware family",
                                    "hunt file",
                                    "hunt hash",
                                    "hunt ip",
                                    "hunt similar",
                                    "search terms"
                                ],
                                "active": true,
                                "app_name": "Falcon Sandbox",
                                "app_version": "1.1.6",
                                "appid": "8383852c-43dc-4356-ac81-4e6dd65ee23e",
                                "asset_name": "hybrid analysis",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "hash": "merge_list:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 23,
                                "loaded": false,
                                "missing": false,
                                "name": "hybrid-analysis-personal",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Submit Name",
                                        "column_order": 0,
                                        "contains": [
                                            "file name"
                                        ],
                                        "data_path": "action_result.data.*.submit_name",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Job Id",
                                        "column_order": 1,
                                        "contains": [
                                            "falcon sandbox job id"
                                        ],
                                        "data_path": "action_result.data.*.job_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Sample Sha256",
                                        "column_order": 2,
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.sha256",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Environment",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.environment",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.environment_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.environment_description",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Verdict",
                                        "column_order": 4,
                                        "contains": [
                                            "falcon sandbox verdict"
                                        ],
                                        "data_path": "action_result.data.*.verdict",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.threat_score",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Threat Score",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.threat_score_verbose",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.found",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.unknown",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.no_verdict",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.no_specific_threat",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.whitelisted",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.suspicious",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.malicious",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "sha256",
                                            "sha1",
                                            "md5"
                                        ],
                                        "data_path": "action_result.parameter.hash",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "hash": {
                                        "contains": [
                                            "sha256",
                                            "sha1",
                                            "md5"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Sha1, Md5, Sha256",
                                        "key": "hash",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Falcon Sandbox",
                                "product_vendor": "Hybrid Analysis",
                                "targets": "23",
                                "type": "sandbox"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "hunt hash"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def hunt_hash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('hunt_hash() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'hunt_hash' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_list:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'hunt_hash' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'hash': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"hunt hash\", parameters=parameters, assets=['hybrid-analysis-personal'], callback=hunt_hash_format, name=\"hunt_hash\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge list",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "hunt hash",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "c040f191-9789-4f2b-b4ed-6ed6265ea45e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 394,
                        "line_start": 373,
                        "message": "Configuring now",
                        "name": "hunt hash",
                        "notes": "Hunts hash against sandbox resource",
                        "number": 1,
                        "order": 9,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 360,
                            "y": 40
                        },
                        "previous_function": "",
                        "previous_name": "hunt_hash",
                        "required_params": {
                            "hash": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 636
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "hunt hash format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def hunt_hash_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('hunt_hash_format() called')\n    \n    template = \"\"\"%%\n### Falcon Sandbox Summary of {0}: *{1}, {2} - {3}*\n\n*Hybrid Analysis Link: https://hybrid-analysis.com/sample/{10}*\n\n| Data| Result |\n| --- | --- |\n| VX family | {4} |\n| Scan date |  {5} |\n| Name(s) | {6} |\n| Environment | {7} |\n| Type | {8} | \n| sha1 | {9} | \n| sha256 | {10} | \n| imphash | {11} |\n| ssdeep | {12} |\n\n---\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"hunt_hash:action_result.parameter.hash\",\n        \"hunt_hash:action_result.message\",\n        \"hunt_hash:action_result.data.*.verdict\",\n        \"hunt_hash:action_result.data.*.threat_score_verbose\",\n        \"hunt_hash:action_result.data.*.vx_family\",\n        \"hunt_hash:action_result.data.*.analysis_start_time\",\n        \"hunt_hash:action_result.data.*.submit_name\",\n        \"hunt_hash:action_result.data.*.environment\",\n        \"hunt_hash:action_result.data.*.type\",\n        \"hunt_hash:action_result.data.*.sha1\",\n        \"hunt_hash:action_result.data.*.sha256\",\n        \"hunt_hash:action_result.data.*.imphash\",\n        \"hunt_hash:action_result.data.*.ssdeep\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"hunt_hash_format\")\n\n    join_indicator_analysis(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "hunt hash",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "hunt hash format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "2e08bb76-1525-4612-ac24-f813b75d0e56",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 440,
                        "line_start": 394,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Create detonated information format for note",
                        "number": 12,
                        "order": 10,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "hunt_hash:action_result.parameter.hash"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "hunt_hash:action_result.message"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "hunt_hash:action_result.data.*.verdict"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "hunt_hash:action_result.data.*.threat_score_verbose"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "hunt_hash:action_result.data.*.vx_family"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "hunt_hash:action_result.data.*.analysis_start_time"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "hunt_hash:action_result.data.*.submit_name"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "hunt_hash:action_result.data.*.environment"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "hunt_hash:action_result.data.*.type"
                            },
                            {
                                "position": 9,
                                "type": "",
                                "value": "hunt_hash:action_result.data.*.sha1"
                            },
                            {
                                "position": 10,
                                "type": "",
                                "value": "hunt_hash:action_result.data.*.sha256"
                            },
                            {
                                "position": 11,
                                "type": "",
                                "value": "hunt_hash:action_result.data.*.imphash"
                            },
                            {
                                "position": 12,
                                "type": "",
                                "value": "hunt_hash:action_result.data.*.ssdeep"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": 40
                        },
                        "previous_function": "",
                        "previous_name": "hunt_hash_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### Falcon Sandbox Summary of {0}: *{1}, {2} - {3}*\n\n*Hybrid Analysis Link: https://hybrid-analysis.com/sample/{10}*\n\n| Data| Result |\n| --- | --- |\n| VX family | {4} |\n| Scan date |  {5} |\n| Name(s) | {6} |\n| Environment | {7} |\n| Type | {8} | \n| sha1 | {9} | \n| sha256 | {10} | \n| imphash | {11} |\n| ssdeep | {12} |\n\n---\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 637
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def fileHash_filter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('fileHash_filter() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.fileHash\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.fileHashMd5\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.fileHashSha1\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.fileHashSha256\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.fileHashSha512\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.hash\", \"not in\", \"custom_list:bogon_list\"],\n        ],\n        logical_operator='or',\n        name=\"fileHash_filter:condition_1\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        merge_list(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "fileHash filter",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 65,
                        "line_start": 42,
                        "name": "filter",
                        "notes": "Filters for fileHash(s) and removes allowed list objects from custom_list:bogon_list\n\nGREEN: if fileHash exists otherwise exit and return to main code block",
                        "number": 1,
                        "order": 3,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.fileHash",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.fileHashMd5",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.fileHashSha1",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.fileHashSha256",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.fileHashSha512",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.hash",
                                        "value": "custom_list:bogon_list"
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -40,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "fileHash_filter",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 640
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "set status",
                        "attrs": {
                            ".api": {
                                "text": "set status to new"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def set_status_to_new(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('set_status_to_new() called')\n\n    phantom.set_status(container=container, status=\"New\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "key": "set-status",
                                "setStatusStatus": "New",
                                "setStatusStatus_display": "New"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "create task notes",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "set status to new",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "68cbccaf-5002-4dcf-801e-95e7069ab90f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 701,
                        "line_end": 664,
                        "line_start": 657,
                        "message": "Configuring now",
                        "name": "set status",
                        "notes": "Sets status to new signal to analyst the container is ready for pickup",
                        "number": 4,
                        "order": 14,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1120,
                            "y": 60
                        },
                        "previous_function": "",
                        "previous_name": "set_status_to_new",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 645
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "4361460e-a639-4dc5-a7d9-eab568ac0e50",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "68cbccaf-5002-4dcf-801e-95e7069ab90f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 646
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "intel format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def intel_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('intel_format() called')\n    \n    template = \"\"\"%%\n### Recorded Future Summary of {0}: *{1}*\n\n***Critical Label: {2}, Last seen: {3}***\n*RF link (Intel Card): {4}*\n\nOrganization: {5} , ASN: {6} , First Seen: {7}\n\n***Threat List:***\n- Threat list: {20}\n- Threat list: {21}<\n\n***Rules Found***\n1.  **{8}** - Evidence: {9}\n1. **{10}** - Evidence: {11}\n1. **{12}** - Evidence: {13}\n1. **{14}** - Evidence: {15}\n1. **{16}** - Evidence: {17}\n1. **{18}** - Evidence: {19}\n\n---\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"file_intelligence:action_result.parameter.hash\",\n        \"file_intelligence:action_result.data.*.risk.riskSummary\",\n        \"file_intelligence:action_result.summary.criticalityLabel\",\n        \"file_intelligence:action_result.summary.lastSeen\",\n        \"file_intelligence:action_result.data.*.intelCard\",\n        \"file_intelligence:action_result.data.*.location.organization\",\n        \"file_intelligence:action_result.data.*.location.asn\",\n        \"file_intelligence:action_result.data.*.timestamps.firstSeen\",\n        \"file_intelligence:action_result.data.*.risk.evidenceDetails.0.rule\",\n        \"file_intelligence:action_result.data.*.risk.evidenceDetails.0.evidenceString\",\n        \"file_intelligence:action_result.data.*.risk.evidenceDetails.1.rule\",\n        \"file_intelligence:action_result.data.*.risk.evidenceDetails.1.evidenceString\",\n        \"file_intelligence:action_result.data.*.risk.evidenceDetails.2.rule\",\n        \"file_intelligence:action_result.data.*.risk.evidenceDetails.2.evidenceString\",\n        \"file_intelligence:action_result.data.*.risk.evidenceDetails.3.rule\",\n        \"file_intelligence:action_result.data.*.risk.evidenceDetails.3.evidenceString\",\n        \"file_intelligence:action_result.data.*.risk.evidenceDetails.4.rule\",\n        \"file_intelligence:action_result.data.*.risk.evidenceDetails.4.evidenceString\",\n        \"file_intelligence:action_result.data.*.risk.evidenceDetails.5.rule\",\n        \"file_intelligence:action_result.data.*.risk.evidenceDetails.5.evidenceString\",\n        \"file_intelligence:action_result.data.*.threatLists.0.description\",\n        \"file_intelligence:action_result.data.*.threatLists.1.description\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"intel_format\")\n\n    join_indicator_analysis(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "file intelligence",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "intel format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0bf4bc4e-04e8-4b45-be55-deaaa3f1626e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 373,
                        "line_start": 315,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Create intel information format for note",
                        "number": 11,
                        "order": 8,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "file_intelligence:action_result.parameter.hash"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.riskSummary"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "file_intelligence:action_result.summary.criticalityLabel"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "file_intelligence:action_result.summary.lastSeen"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.intelCard"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.location.organization"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.location.asn"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.timestamps.firstSeen"
                            },
                            {
                                "position": 8,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.evidenceDetails.0.rule"
                            },
                            {
                                "position": 9,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.evidenceDetails.0.evidenceString"
                            },
                            {
                                "position": 10,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.evidenceDetails.1.rule"
                            },
                            {
                                "position": 11,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.evidenceDetails.1.evidenceString"
                            },
                            {
                                "position": 12,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.evidenceDetails.2.rule"
                            },
                            {
                                "position": 13,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.evidenceDetails.2.evidenceString"
                            },
                            {
                                "position": 14,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.evidenceDetails.3.rule"
                            },
                            {
                                "position": 15,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.evidenceDetails.3.evidenceString"
                            },
                            {
                                "position": 16,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.evidenceDetails.4.rule"
                            },
                            {
                                "position": 17,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.evidenceDetails.4.evidenceString"
                            },
                            {
                                "position": 18,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.evidenceDetails.5.rule"
                            },
                            {
                                "position": 19,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.risk.evidenceDetails.5.evidenceString"
                            },
                            {
                                "position": 20,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.threatLists.0.description"
                            },
                            {
                                "position": 21,
                                "type": "",
                                "value": "file_intelligence:action_result.data.*.threatLists.1.description"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": 160
                        },
                        "previous_function": "",
                        "previous_name": "intel_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### Recorded Future Summary of {0}: *{1}*\n\n***Critical Label: {2}, Last seen: {3}***\n*RF link (Intel Card): {4}*\n\nOrganization: {5} , ASN: {6} , First Seen: {7}\n\n***Threat List:***\n- Threat list: {20}\n- Threat list: {21}<\n\n***Rules Found***\n1.  **{8}** - Evidence: {9}\n1. **{10}** - Evidence: {11}\n1. **{12}** - Evidence: {13}\n1. **{14}** - Evidence: {15}\n1. **{16}** - Evidence: {17}\n1. **{18}** - Evidence: {19}\n\n---\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 649
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "40ce9be3-2f94-46c8-803d-40b49a58b396",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "433377a2-6d03-43f9-b0a1-cdbbdb4a2e1a",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 653
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "e61561c4-f27c-4b62-9b59-f12f32f5b883",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "433377a2-6d03-43f9-b0a1-cdbbdb4a2e1a",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "68cbccaf-5002-4dcf-801e-95e7069ab90f",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 656
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add comment",
                        "attrs": {
                            ".api": {
                                "text": "missing data comment"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def missing_data_comment(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('missing_data_comment() called')\n\n    phantom.comment(container=container, comment=\"Missing indicator to execute Indicator Analysis - Filehash playbook.  Check logic and playbook parameters\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addCommentComment": "Missing indicator to execute Indicator Analysis - Filehash playbook.  Check logic and playbook parameters",
                                "key": "add-comment"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "missing data comment",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 447,
                        "line_start": 440,
                        "message": "Configuring now",
                        "name": "add comment",
                        "notes": "Adds a missing data comment, assigned to administrators and opens event",
                        "number": 3,
                        "order": 11,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -100,
                            "y": 240
                        },
                        "previous_function": "",
                        "previous_name": "missing_data_comment",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 660
                    },
                    {
                        "action": "post data",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "body": "generate_task_notes:custom_function:note_params",
                            "headers": "",
                            "location": "/note/",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "post data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "body": "generate_task_notes:custom_function:note_params",
                                    "headers": "",
                                    "location": "/note/",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.body",
                                        "data_type": "numeric",
                                        "example_values": [
                                            "{\"name\": \"Bad IP\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            "false"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "POST"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "body": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "POST body (query string, JSON, etc.)",
                                        "key": "body",
                                        "order": 1,
                                        "required": true
                                    },
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 2,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "create task notes"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_task_notes() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    generate_task_notes__note_params = json.loads(phantom.get_run_data(key='generate_task_notes:note_params'))\n    # collect data for 'create_task_notes' call\n\n    parameters = []\n    \n    # build parameters list for 'create_task_notes' call\n    parameters.append({\n        'location': \"/note/\",\n        'body': generate_task_notes__note_params,\n        'headers': \"\",\n        'verify_certificate': False,\n    })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], callback=set_status_to_new, name=\"create_task_notes\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "file reputation, hunt hash, file intelligence",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def create_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_task_notes() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    generate_task_notes__note_params = json.loads(phantom.get_run_data(key='generate_task_notes:note_params'))\n    # collect data for 'create_task_notes' call\n\n    parameters = []\n    \n    # build parameters list for 'create_task_notes' call\n    for note_params in generate_task_notes__note_params:\n        parameters.append({\n            'location': \"/note/\",\n            'body': json.dumps(note_params),\n            'headers': \"\",\n            'verify_certificate': False,\n        })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], callback=set_status_to_new, name=\"create_task_notes\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "create task notes",
                        "delay": "0",
                        "description": "Create for loop for parameters.append() and json.dumps() the note_params.\n\ncustom code needed:\n    # build parameters list for 'create_task_notes' call\n    for note_params in generate_task_notes__note_params:\n        parameters.append({\n            'body': json.dumps(note_params),\n            'headers': \"\",\n            'location': \"/note/\",\n            'verify_certificate': False,\n        })",
                        "has_custom": false,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "433377a2-6d03-43f9-b0a1-cdbbdb4a2e1a",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 700,
                        "line_start": 677,
                        "message": "Configuring now",
                        "name": "post data",
                        "notes": "Creates workbook task notes that correspond to the tasks created with the appropriate automated analysis",
                        "number": 3,
                        "order": 15,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 880,
                            "y": 60
                        },
                        "previous_function": "",
                        "previous_name": "create_task_notes",
                        "required_params": {
                            "body": true,
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 661
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "generate task notes"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def generate_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('generate_task_notes() called')\n    \n    input_parameter_0 = \"Indicator analysis\"\n    indicator_analysis__analysis = json.loads(phantom.get_run_data(key='indicator_analysis:analysis'))\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_list:custom_function_result.data.*.item'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='reputation_format__as_list')\n    formatted_data_2 = phantom.get_format_data(name='hunt_hash_format__as_list')\n    formatted_data_3 = phantom.get_format_data(name='intel_format__as_list')\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    generate_task_notes__note_params = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    \n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 10\n    \n    # Debug input data\n    #phantom.debug(\"Task Title:\")\n    #phantom.debug(indicator_analysis__analysis)\n    title_data = indicator_analysis__analysis\n        \n    #phantom.debug(\"Reputation Note:\")\n    #phantom.debug(formatted_data_1)\n    rep_data = formatted_data_1\n    \n    #phantom.debug(\"Hunt Note:\")\n    #phantom.debug(formatted_data_2)\n    hunt_data = formatted_data_2\n    \n    #phantom.debug(\"Intelligence Note:\")\n    #phantom.debug(formatted_data_3)\n    intel_data = formatted_data_3\n\n    #phantom.debug(\"IOC Processed\")\n    #phantom.debug(filtered_artifacts_data_1)\n    indicators = custom_function_results_data_1\n    \n    # Organize IOCs by value with correct data for note insertion\n    for indicator in indicators:\n        for title in title_data:\n            if indicator[0] in title['indicator']:\n                indicator.append(title['title'])\n        for rep in rep_data:\n            if indicator[0] in rep:\n                indicator.append(rep)\n        for hunt in hunt_data:\n            if indicator[0] in hunt:\n                indicator.append(hunt)\n        for intel in intel_data:\n            if indicator[0] in intel:\n                indicator.append(intel)\n\n    phantom.debug(\"Reorganzied note data to indicator.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Automated Filehash Indicator Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            title = indicator[1].encode('UTF-8')\n            # Define Note content build here\n            note_content = \"{}\\n {}\\n {}\".format(indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title,\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## {}\\n {}\\n {}\\n {}\\n\".format(indicator[1].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='generate_task_notes:note_params', value=json.dumps(generate_task_notes__note_params))\n    create_task_notes(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "file reputation, hunt hash, file intelligence",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 16,
                        "custom_callback": "",
                        "custom_code": "def generate_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('generate_task_notes() called')\n    \n    input_parameter_0 = \"Indicator Analysis\"\n    indicator_analysis__analysis = json.loads(phantom.get_run_data(key='indicator_analysis:analysis'))\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_list:custom_function_result.data.*.item'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='reputation_format__as_list')\n    formatted_data_2 = phantom.get_format_data(name='hunt_hash_format__as_list')\n    formatted_data_3 = phantom.get_format_data(name='intel_format__as_list')\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    generate_task_notes__note_params = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    \n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 10\n    \n    # Debug input data\n    #phantom.debug(\"Task Title:\")\n    #phantom.debug(indicator_analysis__analysis)\n    title_data = indicator_analysis__analysis\n        \n    #phantom.debug(\"Reputation Note:\")\n    #phantom.debug(formatted_data_1)\n    rep_data = formatted_data_1\n    \n    #phantom.debug(\"Hunt Note:\")\n    #phantom.debug(formatted_data_2)\n    hunt_data = formatted_data_2\n    \n    #phantom.debug(\"Intelligence Note:\")\n    #phantom.debug(formatted_data_3)\n    intel_data = formatted_data_3\n\n    #phantom.debug(\"IOC Processed\")\n    #phantom.debug(filtered_artifacts_data_1)\n    indicators = custom_function_results_data_1\n    \n    # Organize IOCs by value with correct data for note insertion\n    for indicator in indicators:\n        for title in title_data:\n            if indicator[0] in title['indicator']:\n                indicator.append(title['title'])\n        for rep in rep_data:\n            if indicator[0] in rep:\n                indicator.append(rep)\n        for hunt in hunt_data:\n            if indicator[0] in hunt:\n                indicator.append(hunt)\n        for intel in intel_data:\n            if indicator[0] in intel:\n                indicator.append(intel)\n\n    phantom.debug(\"Reorganzied note data to indicator.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Automated Filehash Indicator Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            title = indicator[1].encode('UTF-8')\n            # Define Note content build here\n            note_content = \"{}\\n {}\\n {}\".format(indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title,\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## {}\\n {}\\n {}\\n {}\\n\".format(indicator[1].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='generate_task_notes:note_params', value=json.dumps(generate_task_notes__note_params))\n    create_task_notes(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "generate task notes",
                        "description": "Param 0 = Name of workbook task to update",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 157,
                        "legacy": true,
                        "line_end": 250,
                        "line_start": 110,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Create task notes:\n\nGets the phase, loops thru all the intel and creates the notes in task \"Analyze Indicator and reputation\" for each indicator found.",
                        "number": 1,
                        "order": 6,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "note_params"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "Indicator analysis"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "indicator_analysis:custom_function:analysis"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "reputation_format:formatted_data.*"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "hunt_hash_format:formatted_data.*"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "intel_format:formatted_data.*"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "merge_list:custom_function_result.data.*.item"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1120,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "generate_task_notes",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "    \n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 10\n    \n    # Debug input data\n    #phantom.debug(\"Task Title:\")\n    #phantom.debug(indicator_analysis__analysis)\n    title_data = indicator_analysis__analysis\n        \n    #phantom.debug(\"Reputation Note:\")\n    #phantom.debug(formatted_data_1)\n    rep_data = formatted_data_1\n    \n    #phantom.debug(\"Hunt Note:\")\n    #phantom.debug(formatted_data_2)\n    hunt_data = formatted_data_2\n    \n    #phantom.debug(\"Intelligence Note:\")\n    #phantom.debug(formatted_data_3)\n    intel_data = formatted_data_3\n\n    #phantom.debug(\"IOC Processed\")\n    #phantom.debug(filtered_artifacts_data_1)\n    indicators = custom_function_results_data_1\n    \n    # Organize IOCs by value with correct data for note insertion\n    for indicator in indicators:\n        for title in title_data:\n            if indicator[0] in title['indicator']:\n                indicator.append(title['title'])\n        for rep in rep_data:\n            if indicator[0] in rep:\n                indicator.append(rep)\n        for hunt in hunt_data:\n            if indicator[0] in hunt:\n                indicator.append(hunt)\n        for intel in intel_data:\n            if indicator[0] in intel:\n                indicator.append(intel)\n\n    phantom.debug(\"Reorganzied note data to indicator.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Automated Filehash Indicator Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            title = indicator[1].encode('UTF-8')\n            # Define Note content build here\n            note_content = \"{}\\n {}\\n {}\".format(indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title,\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## {}\\n {}\\n {}\\n {}\\n\".format(indicator[1].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n",
                        "warn": false,
                        "z": 662
                    }
                ]
            },
            "notes": "INPUT: Filehash artifact\nINTERACTION: VirusTotal, RecordedFuture, Hybrid Analysis\nACTION: filehash reputation, filehash intelligence, hunt hash\nARTIFACTS:\nP1: get intel and reputation, create a new task and add a note with the summarized intel\nP2: if a total failure report errors"
        },
        "python_version": "2.7",
        "schema": 4,
        "version": "4.9.39220"
    },
    "create_time": "2020-12-07T21:36:18.342743+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}